* *Tasks*
** DONE [[https://github.com/org2blog/org2blog/blob/master/README.org][Set up org2blog]]
   [2018-12-26 Wed]
** Create a function to warn user before creating a back up org file.
*** Decided not to do this.  I htink its an iCloud problem
** DONE [#A] Look at emacs dictionary for javascript.
** DONE [#A] Stop using clipbard to store information for functions.  Look up registers and start using them.
** DONE speedbar
** DONE [#A] javascript in emacs?
** DONE The Emacs Ipython Notebook- John Miller (Honeywell UOP) - YouTube
https://www.youtube.com/watch?v=OB9vFu9Za8w
** CANCELED https://dev.to/deciduously/how-i-emacs-and-so-can-you-packages-m9p Company mode

***  (add-hook 'after-init-hook 'global-company-mode)
(provide 'init-company)
*** Tried this.  Didn't like it.
** CANCELED https://dev.to/deciduously/how-i-emacs-and-so-can-you-packages-m9p neotree
*** Decided I didn't need this either.
** TODO [#C] [[http://melpa.org/#/pubmed]] 
** TODO [#C] [[http://blog.anmoljagetia.me/perfect-macos-launcher-for-emacs/][Perfect macOS Emacs workflow]] 
** TODO [#C] [[https://nullprogram.com/blog/2017/10/27/][Make Flet Great Again « null program]] Look into lisp unit testing
** DONE [#A] [[https://github.com/abo-abo/swiper][GitHub - abo-abo/swiper: Ivy - a generic completion frontend for Emacs, Swiper - isearch with an overview, and more. Oh, man!]] 
** TODO [#C] [[http://doc.rix.si/cce/cce-emacs-core.html][Complete Computing Environment: Core Emacs]] 
** TODO [#C] [[https://orgmode.org/worg/org-tutorials/advanced-searching.html][Advanced searching]]
** TODO Power thesaurus
** CANCELED [#A] [[https://orgmode.org/manual/Structure-Editing.html#index-org_002dnarrow_002dto_002dsubtree][The Org Manual: Structure Editing]] Narrow to sub tree worked for indent problem?  Maybe you should add narwoing to initial copying of subtree to variable

Its working fine the way it is.  Don't mess with it unless you have to.
* *Org*
** [[file:~/Library/Mobile%20Documents/com~apple~Preview/Documents/org%20manual%202019-01-13.pdf][file:~/Library/Mobile Documents/com~apple~Preview/Documents/org manual 2019-01-13.pdf]]
** \C-cam to match tag or property
** GitHub - aladine/EverOrg: Evernote to Org mode migration tool
[2019-01-20 Sun 09:28]
https://github.com/aladine/EverOrg
** [[http://notesyoujustmightwanttosave.blogspot.com/2011/12/org-speed-keys.html][Org Speed Keys | *scratch*]]
** [[https://orgmode.org/manual/Images.html#Images][Org Mode Image Handling]]

11.7 Images

An image is a link to an image file118 that does not have a description part, for example

./img/cat.jpg
If you wish to define a caption for the image (see Captions) and maybe a label for internal cross references (see Internal Links), make sure that the link is on a line by itself and precede it with ‘CAPTION’ and ‘NAME’ keywords as follows:

#+CAPTION: This is the caption for the next figure link (or table) #+NAME: fig:SED-HR4049 [[./img/a.jpg]]
Such images can be displayed within the buffer with the following command:

C-c C-x C-v (org-toggle-inline-images)
Toggle the inline display of linked images. When called with a prefix argument, also display images that do have a link description. You can ask for inline images to be displayed at startup by configuring the variable org-startup-with-inline-images119.

Footnotes

(118)

What Emacs considers to be an image depends on image-file-name-extensions and image-file-name-regexps.

(119)

The variable org-startup-with-inline-images can be set within a buffer with the ‘STARTUP’ options ‘inlineimages’ and ‘noinlineimages’.
** [[help:org-file-apps]] - this is the variable to set to associate file types with programs to open org links
** DONE [[https://m.youtube.com/watch?v=KdcXu_RdKI0&amp=&feature=youtu.be]] Org capture video
** [[https://orgmode.org/worg/org-tutorials/advanced-searching.html]] org-mode search functions
** [[https://org-babel.readthedocs.io/en/latest/eval/][Code blocks - Org Babel reference card]] 
How to execute code blocks by name to insert the results in an org buffer
** [[https://org-babel.readthedocs.io/en/latest/eval/][Code blocks - Org Babel reference card]] Named code blocks for execution as part of a file*
** CANCELED [#C] [[https://github.com/org2blog/org2blog/tree/v1.1.0#installation][GitHub - org2blog/org2blog at v1.1.0]] 
* *Dired*
** Search for words in files
*** Use find-grep-dired
*** Emacs: Search Text in Files
[2018-12-18 Tue 04:19]
http://ergoemacs.org/emacs/emacs_grep_find.html
*** Dired and Find - GNU Emacs Manual
[2018-12-18 Tue 04:21]
https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired-and-Find.html
** How to sort dired by date by default [[https://superuser.com/questions/875241/emacs-dired-sorting-by-time-date-as-default#1212406]] 
** [[https://emacs.stackexchange.com/questions/5603/how-to-quickly-copy-move-file-in-emacs-dired#5604]] How to copy files between windows
(setq dired-dwim-target t)
** [[https://www.emacswiki.org/emacs/RecentFiles]] 
** to search marked files in dired for a regex: mark all of the files (* /, for instance, to select all directories and t to toggle the mark to all files), shift-A to search, M-, to move from hit to hit.
** C-x C-q make dired buffer editable, C-c C-c to end editing and "save" changes
** DONE [[https://github.com/jojojames/dired-sidebar][GitHub - jojojames/dired-sidebar: Sidebar for Emacs leveraging Dired]] 

* *Development*
** [[https://spin.atomicobject.com/2016/05/27/write-emacs-package/][Take Your Emacs to the Next Level by Writing Custom Packages]]  Includes instrucitons on how to push to MELPA.
** [[message://%3c53DBB187-0C25-4BAB-895B-4C73C609AB38@rush.edu%3E][Configureing Emacs for Python]]
** Emacs Balanced Expressions – 77 Mass Ave.
[2019-01-20 Sun 09:19]
https://anoncumlaude.wordpress.com/2019/01/17/emacs-balanced-expressions/
** Example of how to use registers

(set-register ?a (current-kill 0 t))
(insert (concat entryTitle "\n\t" (get-register ?a)))
** Example of how to use registers

(set-register ?a (current-kill 0 t))
(insert (concat entryTitle "\n\t" (get-register ?a)))
** Nice article that shows how to work with IntelliJ and also run lisp from emacsclient. 
[[https://developer.atlassian.com/blog/2015/03/emacs-intellij/][Quick Tip: Getting Emacs and IntelliJ to play together - Atlassian Developers]]
** [[http://mbork.pl/2019-02-17_Inserting_the_current_file_name_at_point][Marcin Borkowski: 2019-02-17 Inserting the current file name at point]]
** DONE [[http://endlessparentheses.com/debugging-emacs-lisp-part-1-earn-your-independence.html]] 
** DONE [[http://endlessparentheses.com/debugging-elisp-part-2-advanced-topics.html]] 
** [[https://cafebedouin.org/2019/03/25/a-road-to-common-lisp-steve-losh/][Learn to Program With Common Lisp – cafebedouin.org]] 
** CANCELED [[https://github.com/emacs-lsp/lsp-mode][GitHub - emacs-lsp/lsp-mode: Emacs client/library for the Language Server Protocol]] 
** Copy-special copies subtree as kill
   [[help:Enabled]]
* *LaTeX*
** Keyboard shortcut to insert latex
[[https://emacs.stackexchange.com/questions/18619/org-mode-any-keyboard-shortcut-for-latex-code][yasnippet - Org-mode: any keyboard shortcut for Latex code? - Emacs Stack Exchange]]
** Shortcut to indent-region is C-M-\
[[http://mbork.pl/2019-01-28_A_simple_tip_with_killing_and_yanking_code][Marcin Borkowski: 2019-01-28 A simple tip with killing and yanking code]]
** [[https://www.emacswiki.org/emacs/RefTeX]] Reftex 
** [[http://www.gnu.org/software/auctex/manual/reftex.html#SEC1]] Reftex manual
** [[https://www.reddit.com/r/emacs/comments/b9out3/latex_manual_preview/?utm_source=share&utm_medium=ios_app][https://www.reddit.com/r/emacs/comments/b9out3/latex_manual_preview/?utm_source=share&utm_medium=ios]] 
** [[https://tableconvert.com/?output=latex][Table Convert Online - table to markdown,csv,json,latex table,excel,sql,xml]] 
** [[https://oeis.org/wiki/List_of_LaTeX_mathematical_symbols][List of LaTeX mathematical symbols - OeisWiki]] 
** [[https://www.latextemplates.com/][LaTeX Templates]] 
** [[https://www.overleaf.com/][Overleaf, Online LaTeX Editor]] - good site for LaTeX templates
** Its '\C-c )' to reference a label
   [[info:reftex#Referencing%20Labels][info:reftex#Referencing Labels]]
** Its '\C-c )' to reference a label
   [[info:reftex#Referencing%20Labels][info:reftex#Referencing Labels]]
* *Miscellaneous*
** emms (emacs multimedia)
Try this. 
emms ftw
I never got into the Emacs MultiMedia System, but just read that it has support for streaming radios so I gave it a try. And you know what?  It's awesome.  I'm adding all the radios I have in my radios repo.

But you already knew that.

Only a few concepts/commands:
- m-x emms-streams RET
- m-x emms RET
- c-+ + + +
- m-x emms-add-dired RET

Enough to get by and start using it.









http://puntoblogspot.blogspot.com/search/label/emacs
** TODO [#C] [[https://www.reddit.com/r/emacs/comments/b13n39/how_do_you_manage_window_sizes_in_emacs/]] 
C-u (number of lines) C-x ^ to enlarge.  Negative argument shrinks window
** [[https://www.reddit.com/r/emacs/comments/b1h4ge/cycle_through_a_set_of_buffers/]] emacs -slack?
** [[https://www.reddit.com/r/emacs/comments/b13n39/how_do_you_manage_window_sizes_in_emacs/]] 
** [[https://emacs.stackexchange.com/questions/5603/how-to-quickly-copy-move-file-in-emacs-dired#5604]] How to copy files between windows
** [[1.3 Execute code/settings on the fly

Unlike other environments and programs that pretend to be interactive, Emacs actually is. When you see a code snippet closed between parenthesis (well, it needs to be somewhat valid Elisp) like for example:

(message "Mozart is a great %s."
         (if (> (string-to-number (emacs-uptime "%H")) 3)
             "programmer"
           "composer"))
it can be immediately executed by placing the cursor just after the last closing paren and pressing:

C-x C-e

You can (re)set/(re)define functions, variables, whatever this way and it immediately comes into effect. This holds for everything you see below.]] 1.3 Execute code/settings on the fly

Unlike other environments and programs that pretend to be interactive, Emacs actually is. When you see a code snippet closed between parenthesis (well, it needs to be somewhat valid Elisp) like for example:

(message "Mozart is a great %s."
         (if (> (string-to-number (emacs-uptime "%H")) 3)
             "programmer"
           "composer"))
it can be immediately executed by placing the cursor just after the last closing paren and pressing:

C-x C-e

You can (re)set/(re)define functions, variables, whatever this way and it immediately comes into effect. This holds for everything you see below.
** try delete-horizontal-space command

about the delete-horizontal-space command (bound to Meta+\). It deletes all spaces and tabs around the point. You can delete just the white space before the point by specifying the universal argument. I learned about the command from a reddit post by rmberYou that listed some useful Emacs packages.

The post suggested hungry-delete but then added a note about delete-horizontal-space. The suggestion for delete-horizontal-space came from a comment where the command cycle-spacing (bound to Meta+Space) is also discussed. One invocation of cycle-spacing deletes all the spaces but one. Two invocations deletes all the spaces, and three invocations puts things back the way they were.

https://irreal.org/blog/
** [[http://www.howardism.org/Technical/Emacs/templates-tutorial.html][yasnippet]] 
** [[https://irreal.org/blog/?p=7925][deletting blank lines]]
** [[https://joostkremers.github.io/pandoc-mode/]] 
** [[http://christiantietze.de/posts/2019/03/sync-emacs-org-files/][Sync Emacs Org Agenda Files via Dropbox Without Conflicts • Christian Tietze]] 
This can be used for any file and could be handy, for instance, when coding.
** TODO [#C] [[https://qiita.com/daiyanh/items/7f63c5135db4a47b37f7][macros &amp; regex - two headed monsters - Qiita]] Regex builder
** [[https://emacs.stackexchange.com/questions/22688/how-do-i-configure-home-brew-provisioned-emacs-to-run-a-gui-based-emacsclient-pr][How do I configure home-brew-provisioned emacs to run a GUI-based emacsclient properly? - Emacs Stack Exchange]]
** [[https://github.com/abo-abo/ace-window][GitHub - abo-abo/ace-window: Quickly switch windows in Emacs]] Winmove?
** [[https://github.com/Chobbes/org-chef][GitHub - Chobbes/org-chef: A package for making a cookbook and managing recipes with org-mode.]] 
** [[https://www.reddit.com/r/emacs/comments/bbb42t/whats_your_job_whats_your_daily_emacs_workflow/][What's your job? What's your daily emacs workflow? - emacs]] Excorporate for exchange calendar to diary. 
** [[https://irreal.org/blog/?p=7993][https://irreal.org/blog/?p=7993]] Eww-search-words
** [[https://castel.dev/post/lecture-notes-1/]] Snippets and auto expansion for emacs
** [[https://github.com/Malabarba/beacon][GitHub - Malabarba/beacon: A light that follows your cursor around so you don't lose it!]] 
** [[https://www.emacswiki.org/emacs/unbound.el][EmacsWiki: unbound.el]] 
** [[https://github.com/Fuco1/free-keys][GitHub - Fuco1/free-keys: Show free keybindings for modkeys or prefixes]] 
** [[http://mbork.pl/2015-07-04_C-x_4_bindings][Marcin Borkowski: 2015-07-04 C-x 4 bindings]] 
** [[https://freesteph.info/blog/compiling-emacs.html][Compiling Emacs 27 on macOS]] 
** [[https://sachachua.com/blog/2008/07/emacs-bbdb-modifying-the-record-creation-process/][Emacs: BBDB: Modifying the record creation process –]] 
** [[https://github.com/d12frosted/homebrew-emacs-plus/][GitHub - d12frosted/homebrew-emacs-plus: Emacs Plus formulae for the Homebrew package manager]] 
** [[https://next.atlas.engineer/][Next]] 
** [[http://manuel-uberti.github.io//emacs/2019/05/14/occur/][http://manuel-uberti.github.io//emacs/2019/05/14/occur/]] Occur?
* DONE [[message://%3C84A7432C-59E1-4DBA-A73B-8A9398B2C3F8@rush.edu%3E][Fix dired so that you can copy to other window by default]]
* DONE How to use outline mode with latex in emacs
[2018-01-17 Wed 04:23]
** outline minor mode automatically on.  Use \C-c and the @ before final key shortcut.  Shortcuts are the same as outline major mode otherwise.

* TODO [#C] Emacs Keybindings for Mac OS X | Irreal                    :Read:
:PROPERTIES:
:CATEGORY: Read & Review
:END:
[2018-02-01 Thu 03:37]
http://irreal.org/blog/?p=259
* TODO [#C] Emacs Lisp is Fun? – Emacs Orgisms RSS feed?               :Read:
:PROPERTIES:
:CATEGORY: Read & Review
:END:      
[2018-02-06 Tue 03:09]
https://eclectic614387068.wordpress.com/2018/01/26/emacs-lisp-is-fun/

* TODO [#C] GitHub - weirdNox/org-noter: Emacs document annotator, using Org-mode :Read:
:PROPERTIES:
:CATEGORY: Read & Review
:END:
[2018-02-13 Tue 02:54]
https://github.com/weirdNox/org-noter


* TODO [#C] Enamored with Emacs – Delta-Lambda                         :Read:
:PROPERTIES:
:CATEGORY: Read & Review
:END:
[2018-02-15 Thu 03:50]
https://deltalambda.wordpress.com/2018/02/14/enamored-with-emacs/


* [#C] https://dzone.com/articles/yet-4-more-techniques-for-writing-better-java?utm_medium=feed&utm_source=feedpress.me&utm_campaign=Feed%3A+dzone%2Fjava
:PROPERTIES:
:CATEGORY: Read & Review
:END:
* [#C] https://dzone.com/articles/5-things-you-need-to-know-about-java-9?utm_medium=feed&utm_source=feedpress.me&utm_campaign=Feed%3A+dzone%2Fjava
:PROPERTIES:
:CATEGORY: Read & Review
:END:


* TODO [#C] Emacs as a C/C++ IDE on Windows – Blue2RGB
:PROPERTIES:
:CATEGORY: Read & Review
:END:
[2018-02-23 Fri 02:45]
https://blue2rgb.wordpress.com/2018/02/22/emacs-as-a-c-c-ide-on-windows/


* TODO [#C] Emacs Lisp Lambda Expressions Are Not Self-Evaluating « null program
:PROPERTIES:
:CATEGORY: Read & Review
:END:
[2018-02-23 Fri 03:02]
http://nullprogram.com/blog/2018/02/22/


* TODO [#C] Literate Benchmarking | Irreal
:PROPERTIES:
:CATEGORY: Read & Review
:END:
[2018-02-23 Fri 03:02]
http://irreal.org/blog/?p=6974


* TODO [#C] Literate DevOps
:PROPERTIES:
:CATEGORY: Read & Review
:END:
[2018-02-23 Fri 03:03]
http://www.howardism.org/Technical/Emacs/literate-devops.html


* TODO [#C] What's in an Emacs Lambda « null program
:PROPERTIES:
:CATEGORY: Read & Review
:END:
[2018-02-23 Fri 03:03]
http://nullprogram.com/blog/2017/12/14/


* TODO [#C] Buttery Smooth Emacs
:PROPERTIES:
:CATEGORY: Read & Review
:END:
[2018-02-13 Tue 03:04]
https://www.facebook.com/notes/daniel-colascione/buttery-smooth-emacs/10155313440066102/


* TODO [#C] Alex Schroeder: Diary rss?
:PROPERTIES:
:CATEGORY: Read & Review
:END:
[2018-02-13 Tue 03:06]
https://alexschroeder.ch/wiki

* Quick Hook Example

Let’s add a key (C-c q to run M-x shell) local to python-mode using a hook. For that to work we will need our special hook function, I’ve named it
mp-add-python-keys, and in it we need local-set-key, the function that adds a key to the active buffer’s local map. Observe that the command will be called within the
context of the buffer that invoked the major mode.

Next is the command that tells Emacs that we want to add a mode hook to Python.

(defun mp-add-python-keys ()
  (local-set-key (kbd "C-c q") 'shell))

(add-hook 'python-mode-hook 'mp-add-python-keys)

  [2018-07-15 Sun]
* Listing all the Mode Hooks

If you are unsure of the exact name of the mode hook, you can use this handy trick to list the ones Emacs can see:

C-u M-x apropos-variable RET -mode-hook$ RET.

That will show all mode hooks known to Emacs, including their docstring description. If you don’t see your mode it may be because Emacs hasn’t loaded it outright or
it lacks the autoload keyword.

* Listing all the Mode Maps

If you type this Emacs will give you an apropos buffer with all the known mode maps that follow the major mode naming scheme:

C-u M-x apropos-variable RET -mode-map$ RET

* You can pick any keyboard combination you desire – even if that key bind is already taken, so be careful – but Emacs has set aside certain keys for use by users.
Generally, all keys prefixed with C-c ? (where ? is a single character) are reserved for you, and you alone. In practice most third-party packages don’t give a hoot and
will gladly stuff their own key binds in there.

The other set of reserved keys are the F-keys from F5 and onwards. The other two prefix keys reserved to you are hyper and super. They are remnants from
ancient keyboards used in the 80s, but live on today in Emacs. Most PC-compatible keyboards won’t have a super or hyper key so some people rebind the Windows
key and the Application Context key to be hyper and super instead.

Anyway, if you want to use hyper then use the prefix key H- (e.g., H-q) and if you want super use the prefix key s-. Take note of the lower case ‘s’!

* It is possible for Emacs to enumerate all the active minor and major mode key bindings in a buffer by typing C-h m. This command is very useful if you want to learn
more about what a major or minor mode can do. Likewise, you can type out parts of a complete key (say M-s) and then type C-h to get a list of all keys that belong to
that prefix.

* Mastering Emacs: Key Bindings
https://www.masteringemacs.org/article/mastering-key-bindings-emacs

* DONE [[https://francopasut-en.blogspot.com/2019/03/emacs-org-mode-code-blocks-with-and.html][Emacs Org Mode code blocks with and without colors]] 
